# Для создания собственного типа исключения необходимо создать класс,
# являющийся потомком (наследником) одного из уже существующего типа исключения

# class NegativeAgeError(Exception):
#     pass

# описывает новый тип исключения с именем NegativeAgeError
# в большинстве случаев достаточно создать пустой класс,
# который является потомком класса Exception.
# Теперь мы можем работать с типом исключения NegativeAgeError, как с любым встроенным.

# try:
#     print('Введите свой возраст')
#     age = int(input())
#     if age < 0:
#         raise NegativeAgeError('Возраст не может быть отрицательным')
#     print('Ваш возраст равен', age)
# except ValueError:
#     print('Возраст должен быть числом')
# except NegativeAgeError as e:
#     print(e)

# при вводе некорректных значений приводит к возбуждению соответствующих типов исключений:
# ValueError – при нечисловых значениях
# NegativeAgeError – при отрицательных числовых значениях


# При написании программного кода,
# который может потенциально возбуждать исключения,
# существуют два основных подхода:
#  -  LBYL (Look Before You Leap) — посмотри перед прыжком
# Перестраховаться и заранее проверить, что все получится
# Сначала посмотрели, убедились, что все в порядке, только потом сделали
# ДатаВремя = {'Timur': 29, 'Ivan': 54}
# if 'Anri' in ДатаВремя:
#     ДатаВремя['Anri'] += 1
# else:
#     print('Ключ Anri отсутствует в словаре.')


#  -  EAFP (Easier to Ask Forgiveness than Permission) — проще извиниться, чем спрашивать разрешение
# Мы можем описывать только главный алгоритм
# рассчитывая, что все будет хорошо
# Но при таком подходе необходимо прописать действия с исключениями (иногда разных типов).
# ДатаВремя = {'Timur': 29, 'Ivan': 54}
# try:
#     ДатаВремя['Anri'] += 1
# except KeyError:
#     print('Ключ Anri отсутствует в словаре.')

