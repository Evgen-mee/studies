# date
# from datetime import date
# my_date = date(1992, 10, 6)    # тип date: год + месяц + день
# print(my_date) == 1992-10-06
# print(type(my_date)) == <class 'datetime.date'>

# Получить доступ к атрибутам класса Date
# print('Год =', my_date.year) == Год = 1992
# print('Месяц =', my_date.month) ==  Месяц = 10
# print('День =', my_date.day) == День = 6

# Получить текущее время на ПК
# from datetime import date
# creation_date = date.today()
# print(creation_date)

# Дни недели
# метод weekday()  определяет день недели (нумерация начинается с 0 == понедельник)
# date1 = date(2022, 10, 15)
# date2 = date(1999, 12, 26)
# print(date1.weekday()) == 5  # суббота
# print(date2.weekday()) == 6   # воскресенье
# метод isoweekday()  определяет день недели (нумерация начинается с 1 == понедельник)
# date1 = date(2022, 10, 15)
# date2 = date(1999, 12, 26)
# print(date1.isoweekday()) == 6  # суббота
# print(date2.isoweekday()) == 7  # воскресенье

# Номер дня
# Методы fromordinal() и toordinal() позволяют создать дату из номера дня,
# начиная с 0001-01-01, и наоборот, преобразовать дату в номер дня.
# date1 = date.fromordinal(365)     # дата, соответствуюшая номеру дня 365
# date2 = date(1999, 12, 26)        # номер дня, соответствующий дате 1999-12-26
# print(date1) == 0001-12-31
# print(date2.toordinal()) == 730114


#time
# time используется для представления данных о времени и включает информацию
# о часах, минутах, секундах и микросекундах.
# Данный тип данных полностью игнорирует информацию о дате.
#
# from datetime import time
# my_time = time(11, 20, 54, 1234)    # тип time: часы + минуты + секунды + микросекунды
# print(my_time) == 11:20:54.001234
# print(type(my_time)) == <class 'datetime.time'>
#
# Необязательно указывать все его атрибуты в конструкторе.
# Недостающие данные о времени автоматически заполняются нулями
# time1 = time(11, 20, 54, 1234)
# time2 = time(11, 20, 54)
# time3 = time(11, 20)
# time4 = time(11)
# time5 = time()
# time6 = time(minute=23, second=56)
# print(time1) == 11:20:54.001234
# print(time2) == 11:20:54
# print(time3) == 11:20:00
# print(time4) == 11:00:00
# print(time5) == 00:00:00
# print(time6) == 00:23:56
#
# Значение по атрибутам:
# my_time = time(11, 20, 54, 1234)
# print('Часы =', my_time.hour) == Часы = 11
# print('Минуты =', my_time.minute) == Минуты = 20
# print('Секунды =', my_time.second) == Секунды = 54
# print('Микросекунды =', my_time.microsecond) == Микросекунды = 1234

#Сравнение дат и времени
#Дату (тип date) и время (тип time) можно сравнивать с помощью операторов ==, !=, <, >, <= и  >=.

# str()
# возвращает объект в неформальном (понятном человеку) строковом представлении.
# Для встроенных типов данных при печати одиночного
# значения объекта явно вызывать функцию str() не требуется,
# однако при печати списка таких объектов это требуется.
#
# dates = [date(2021, 12, 31), date(2019, 10, 6), date(2022, 11, 8)]   # список дат
# print(dates)
# выведет [datetime.date(2021, 12, 31), datetime.date(2019, 10, 6), datetime.date(2022, 11, 8)]
#
# Если мы хотим вывести содержимое списка в человеческом виде, то нужно прибегнуть к распаковке
# в этом случае функция str() будет вызываться для каждого элемента списка за кулисами
#
# dates = [date(2021, 12, 31), date(2019, 10, 6), date(2022, 11, 8)]
# print(*dates, sep='\n')
# выведет:
# 2021-12-31
# 2019-10-06
# 2022-11-08

# replace()
# Для создания новой даты на основании уже существующей можно использовать метод replace().
# Он возвращает новую дату с переданными измененными значениями свойств year, month, day
#
# date1 = date(1992, 10, 6)
# date2 = date1.replace(year=1995)            # заменяем год
# date3 = date1.replace(month=12, day=17)     # заменяем месяц и число
# print(date1) == 1992-10-06
# print(date2) == 1995-10-06
# print(date3) == 1992-12-17
#
# time1 = time(17, 10, 6)
# time2 = time1.replace(hour=21)                  # заменяем час
# time3 = time1.replace(minute=48, second=59)     # заменяем минуты и секунды
# print(time1) == 17:10:06
# print(time2) == 21:10:06
# print(time3) == 17:48:59
