Нетипизированные языки программирования
Преимущества:
позволяет писать на предельно низком уровне, причем компилятор (интерпретатор) не будет мешать какими-либо проверками типов; вы вольны производить любые операции над любыми видами данных
получаемый код обычно более эффективен
прозрачность инструкций, то есть при знании языка обычно нет сомнений, что из себя представляет тот или иной код

Недостатки:
сложность: могут возникнуть неудобства с представлением таких типов как списки, строки и т.д.
отсутствие проверок: любые бессмысленные действия, например вычитание ссылки на список из строки будут считаться совершенно нормальными, что чревато трудноуловимыми ошибками
низкий уровень абстракции: работа с любым сложным типом данных ничем не отличается от работы с числами, что конечно будет создавать много трудностей

Примеры:
типизированные языки: C, Python, Scala, PHP, Lua, C#, Java и т.д.
нетипизированные языки: Assembler , Forth, Brainfuck и т.д.‌


типизированные языки разделяются
статическая и динамическая типизация
сильная (строгая) и слабая (нестрогая) типизация
явная и неявная типизация


статическая типизация: C, Java, C#, Kotlin, Scala, GO и т.д.
динамическая типизация: Python, JavaScript, Ruby, Julia и т.д.

Преимущества статической типизации:
проверки типов происходят только один раз — на этапе компиляции
скорость выполнения
ускорение разработки при поддержке IDE (отсеивание вариантов, заведомо не подходящих по типу)

Преимущества динамической типизации:
простота создания универсальных коллекций
удобство описания обобщенных алгоритмов (например сортировка списка, которая будет работать не только со списком целых чисел, но и со списком вещественных и даже списком строк)
легкость в освоении — языки с динамической типизацией обычно очень хороши для того, чтобы начать программировать



сильная типизация: Java, Python, Haskell, Lisp и т.д.
слабая типизация: C, JavaScript, Visual Basic, PHP и т.д.



явная типизация: C++, D, C#, Java и т.д.
неявная типизация: Python, PHP, Lua, JavaScript и т.д.


Преимущества явной типизации:
наличие у каждой функции сигнатуры (например int add(int, int)) позволяет без проблем определить, что функция делает
программист сразу записывает, какого типа значения могут храниться в конкретной переменной, что снимает необходимость запоминать это

Преимущества неявной типизации:
сокращение записи: запись def add(x, y) короче, чем int add( int x, int y)
устойчивость к изменениям: если в функции временная переменная была того же типа, что и входной аргумент, то в явно типизированном языке при изменении типа входного аргумента нужно будет изменить еще и тип временной переменной

|JavaScript  |Динамическая | Слабая      | Неявная  |
|Ruby        |Динамическая | Сильная     | Неявная  |
|Python      |Динамическая | Сильная     | Неявная  |
|Java        |Статическая  | Сильная     | Явная    |
|PHP         |Динамическая | Слабая      | Неявная  |
|C           |Статическая  | Слабая      | Явная    |
|C++         |Статическая  | Слабая      | Явная    |
|Perl        |Динамическая | Слабая      | Неявная  |
|Objective-C |Статическая  | Слабая      | Явная    |
|C#          |Статическая  | Сильная     | Явная    |
|Haskell     |Статическая  | Сильная     | Неявная  |
|Common Lisp |Динамическая | Сильная     | Неявная  |
|D           |Статическая  | Сильная     | Явная    |
|Delphi      |Статическая  | Сильная     | Явная    |


