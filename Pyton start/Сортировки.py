#  Сортировка с помощью sort и sorted
# a.sort() меняет список и не чего не возвращает
# a.sort() вернет ошибку если будут не сравниваемые значения
# a.sort(reverse=True) сортировка в обратном порядке

# b =  sorted(a)
# b =  sorted(a,reverse = True) сортировка в обратном порядке

# Не путайте списочный метод sort() и встроенную функцию sorted().
# Они работают одинаково, но списочный метод sort()
# сортирует список на месте,
# а функция sorted() возвращает новый, отсортированный список.
#
# значение key должно быть функцией
# принимающей один аргумент и возвращающей на его основе ключ для сравнения.
#
# Функция, определяющая условия сравнения элементов, называется компаратор (compare – сравнивать).
#
# print(max(numbers, key=abs))        #  указываем функцию abs в качестве компаратора
# print(min(numbers, key=abs))        #  указываем функцию abs в качестве компаратора
# print(sorted(numbers, key=abs))     #  указываем функцию abs в качестве компаратора
#
# def compare_by_second(point):
#     return point[1]
# def compare_by_sum(point):
#     return point[0] + point[1]
#
# points = [(1, -1), (2, 3), (-10, 15), (10, 9), (7, 18), (1, 5), (2, -4)]
# print(sorted(points, key=compare_by_second))   # сортируем по второму значению кортежа
# print(sorted(points, key=compare_by_sum))      # сортируем по сумме кортежа

