# import re

# import re
# regex = r'П.+?т'
# text = 'Привет, как тебя зовут?'
# match = re.match(regex, text) # записываем Match-объект в переменную match
# print(match)  #<re.Match object; span=(0, 6), match='Привет'>
# span - индексы начала и конца совпадения
# match - само совпадение.


#  - метод group([group1, ...])
# Возвращает найденное совпадение по номеру группы.
# print(match.group())  # Если в метод не передать аргумент, то он по умолчанию выведет нулевую группу
# print(match.group(0)) # Можно передать номер нужной группы в метод
# print(match[0])       # Благодаря геттеру в Match-объекте к группам можно обращаться с помощью квадратных скобок
# Все вызовы сверху выведут совпадение нулевой группы, т.е. всего регулярного выражения
# В данном случае они выведут строку "Привет"
#
# Если обратиться к несуществующей группе, то получим ошибку IndexError: no such group:
# # Ошибка: IndexError: no such group
# print(match.group(2))
# print(match[2])
#
# Если у группы есть имя, то по нему можно получить нужную группу:
# # Выведет строку "риве":
# print(match.group("name")) # Получаем то, что захватила группа с именем name
# print(match["name"])       # Получаем то, что захватила группа с именем name через квадратные скобки
#
# Через метод можно получить сразу несколько групп. Для этого нужно указать нужные группы через запятую:
# # Выведет кортеж ('Привет', 'риве', 'риве'):
# print(match.group(0, "name", 1))


#  - groups(default=None)
# возвращает кортеж со всеми группами, кроме нулевой
# print(match.groups()) # ('риве',)
# Если какая-либо группа ничего не нашла, то вместо найденного совпадения будет значение аргумента default,
# по умолчанию это None:
#
# import re
# regex = r'П(?P<name>.+?)т,(2 группа)?'
# text = 'Привет, как тебя зовут?'
# match = re.match(regex, text)
# print(match.groups())                    # ('риве', None)
# print(match.groups("Ничего не найдено")) # ('риве', 'Ничего не найдено')


#  - groupdict(default=None)
# возвращает словарь, ключи которого - имена групп, а значения - найденные совпадения этих групп
# print(match.groupdict()) # {'name': 'риве'}
# Если в регулярном выражении не используются именованные группы, то он вернёт пустой словарь.



#  - start(__group=0), end(__group=0)
# Методы start и end возвращают индексы начала и конца совпадения с регулярным выражением группы,
# номер или имя  которой был передан в метод:
# print(match.start(0)) # 0
# print(match.end(0))   # 6
# print(match.start(1)) # 1
# print(match.end(1))   # 5



# - span(__group=0)
# возвращает кортеж с индексом начала и конца совпадения группы, номер или имя которой был передан в метод.
# Он работает аналогично методам start, end, но возвращает пару чисел
# print(match.span(0)) # (0, 6)
# print(match.span(1)) # (1, 5)


# Атрибуты
#  - pos
# можно использовать только с объектом Pattern
# Если обратиться к атрибуту, то можно получить аргумент pos, переданный в функцию.
# pos - это позиция, с которой функция начинает искать совпадения


# - endpos
# можно использовать только с объектом Pattern
# Если обратиться к атрибуту, то можно получить аргумент endpos, переданный в функцию.
# endpos - это позиция, до которой функция ищет совпадения.


# - re
# можно получить регулярное выражение, которое использовалось для поиска
# print(match.re) # re.compile('П.+?т')
# возвращается не строка с регулярным выражением, а объект Pattern


# - string
# Если обратиться к атрибуту, то можно получить строку, в которой искались совпадения:
# print(match.string) # Привет, как тебя зовут?


#  - lastindex
# Возвращает номер последней найденной группы. None, если группы не используются.
# print(match.lastindex) # 1


#  - lastgroup
# Возвращает имя последней найденной именованной группы. None, если именованные группы не используются.
# print(match.lastgroup) # name







