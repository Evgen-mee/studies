# Общая информация
#  - Если нужно использовать несколько флагов сразу - нужно сложить их вместе.
# Ну или написать между ними символ |:
# import re
# test1 = re.findall('123', '123', flags=re.MULTILINE)  # 1 флаг
# test2 = re.findall('123', '123', flags=re.MULTILINE + re.IGNORECASE)  # 2 флага
# test3 = re.findall('123', '123', flags=re.MULTILINE + re.IGNORECASE + re.DOTALL)  # 3 флага
#
# import re
# test1 = re.findall('123', '123', flags=re.MULTILINE)  # 1 флаг
# test2 = re.findall('123', '123', flags=re.MULTILINE | re.IGNORECASE)  # 2 флага
# test3 = re.findall('123', '123', flags=re.MULTILINE | re.IGNORECASE | re.DOTALL)  # 3 флага
#
#
# - Встроенные флаги
# флаги можно указать в самом регулярном выражении.
# Достаточно просто поставить встроенный флаг перед регулярным выражением
# r"(?i)I like flags"
#
# Если нужно использовать сразу несколько флагов - достаточно их перечислить: \
# r"(?ims)I like flags"


#  - Локальные и глобальные флаги
# глобальные флаги
# Все флаги которые только что были пройдены - глобальные, т.е.
# они действуют на всё регулярное выражение целиком.
#
# Локальные
# если нам нужно отключить флаг в какой-либо части выражения,
# или использовать его только в определенном месте
# нужно использовать локальные флаги
# они есть только в встроенном виде
# (?aiLmsux-imsx:regex)
# Все флаги до - используются вместе с regex, а флаги, стоящие после - перестают работать с regex.
#
# regex = r"(?i)(?ms-i:local) global"
# Используется глобальный флаг i, но он будет работать только при поиске текста global.
# А при поиске текста local, флаг i отключается, и вместо него используются флаги m и s


#  - Объект RegexFlag
# тобы конвертировать их в привычный нам вид, достаточно провести следующие манипуляции:
#
# import re
# pattern = re.compile(r'[a-zA-Z]{1,}')
# print(pattern.flags) # 32
# print(re.RegexFlag(32)) # re.UNICODE
