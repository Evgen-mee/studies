# список == массив
# имеем доступ по индексу
# можем менять значение по индексу
# можем содержать любые типы
# city = ["москва", "питер", "воронеж"]

# метод list преобразует итерируемый тип данных в список
# x = list("1234") на выходе получаем x = ['1', '2', '3', '4']
# метод sorted(x) вернет новый список без изменения исходного от минимального к большему
# что бы отсортировать от большего то добавляем второй аргумент sorted(reverse=True)

# [1,2,3,4]+[5,6] на выходе даст новый список

# [1,2,3,4]*3 на выходе даст дублированный список

# проверяем есть ли в списке опрекделенное значение 2 in x вернет bool

# удалить элемент списка по индексу del x[0] изменения произойдут в этом же списке

# принимает в лист ввод lst=list(map(int,input().split()))

#Копировать список x1 = x[:] если просто x1 = x то получим ссылку на список

# x1 = x[:-1] будет копировать до последнего индекса ДО НЕ ВКЛЮЧИТЕЛЬНО

# x1 = x[::-1] ИНВЕРСИЯ СПИСКА

# x[2:4] = [8,9] или x[2:4] = 8,9 ЗАМЕНИЛИ ЗНАЧЕНИЯ по указанному срезу

# метод append(101) добавляет значение в конец списка можно добавлять только один экземпляр

# Метод extend() как бы расширяет один список, добавляя к нему элементы другого списка.
# Отличие между методами append() и extend() проявляется при добавлении строки к списку
# Метод append() добавляет строку 'python' целиком к списку,
# а метод extend() разбивает строку 'python' на  символы 'p', 'y', 't', 'h', 'o', 'n' и их добавляет в качестве элементов списка. .

# метод insert(3,100) добавляет значение по индексу и сдвигает очередность

# метод remove(100) удалит первое совпадение в списке НО ТАК ЖЕ BOOL = число кроме 0


# метод pop() удаляет последний элемент или элемент по индексу pop(3)
# удаляемый элемент можем сохранить в переменную x = lst.pop() сохраниться последний элемент
# метод clear() очищает список

# метод copy() копирует список x=x1.copy() или x=x1[:] или x=list(x1)

# метод count(100) возвращает количество совпадений в списке согласно введенному значению (число)

# метод index(100) возвращает первый индекс введенного значения если находит
# index(100, -1) вторым значением указываем индекс начала поиска значения
# если значения нет в коллекции то вернет ошибку перед использованием проверяем через in

# метод reverse() зеркалит список

# метод sort(x,reverse = True) сортирует от меньшего к большему текущий список МОЖНО СОРТИРОВАТЬ СТРОКИ

# ВЛОЖЕННЫЕ СПИСКИ

# lng = [[x[:],x[:],x[:]] обЪявили вложенный список с копированием

# Обращаемся к вложенному списку lng[0][1]

# Обеденить ысе вложенные списки sum(t,[])

# условные операторы
# ДОПУСТИМО if -4 <= x <=10 ДИАПОЗОН

# Тернанный ОПЕРАТОР ВОЗВРАЩАЕТ РЕЗУЛЬТАТ
# <значение1> if <условие> else <значение 2>
# x = a if a > b else b
# можно добавлять в список [1,2,3,4,a if a > b else b]


def reverse(st):
    return " ".join(st.split()[::-1])


print(reverse('yksffkiayijgrsiwqh gsefegwl iukqlerheoyrysupo  hqelauhetudeyyawjiqujurus fgyhwpgrqpig'))