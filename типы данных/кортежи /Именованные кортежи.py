# тип namedtuple
# подтип обычных кортежей
# их значения можно получать как с помощью индекса []
# так и с помощью имени через точку

# Характеристика / тип 	     Именованный кортеж 	 Словарь
# Читабельность (readability) 	     ✔️ 	             ✔️
# Изменяемость (mutability) 	     ❌ 	             ✔️
# Потребление памяти (memory usage)  ✔️              	 ❌
# Производительность (performance) 	 ✔️ 	             ❌

# Мы можем распаковывать именованный кортеж, также как и обычный.
# При работе с именованным кортежами мы можем использовать срезы (результатом среза является обычный кортеж)
# Основное предназначение именованных кортежей — это улучшение читаемости программного кода
#
# Кортежи и именованные кортежи с изменяемыми значениями не могут:
# быть хешированы поэтому не могут быть элементами множеств и ключами в словарях
#
# Кортежи и именованные кортежи без изменяемых значений
# могут быть хешированы, поэтому могут быть элементами множеств и ключами в словарях
#
#
# from collections import namedtuple
# Point = namedtuple('Point', ['x', 'y'])     # объявляем тип Point именованного кортежа
# point = Point(3, 7)                                            # создаем именованный кортеж Point
# print(point)                     # Point(x=3, y=7)
# print(point.x, point.y)          # 3 7
# print(point[0], point[1])        # 3 7
# print(type(point))               # <class '__main__.Point'>

# namedtuple()
# выступает в роли фабричной функции, порождающей новые типы данных
# namedtuple(typename, field_names, *, rename=False, defaults=None, module=None)
# два обязательных параметра typename и field_names
#
# - typename отвечает за имя создаваемого типа
#
# - field_names за названия полей
# В качестве параметра можно использовать:
# список
# словарь
# кортеж
# строка
# множество
# можно передавать любой итерируемый объект, например, результат вызова функций map() и filter().
#
# - rename
# В качестве названия полей мы не можем использовать:
# - имена, начинающихся с подчеркивания (_)
# - ключевых слов языка Python (if, with, else, class, ...)
#
# что бы не возникала ошибка из за имени (допустим парсим файл)
# устанавливаем значение True
# теперь если попадуться такие имена то они будут заменены на _цифра ("Class = _3")
# и ошибки не будет

# - defaults
# используется для того, чтобы установить значения по умолчанию
# для полей именованного кортежа
#
# Point = namedtuple('Point', ['x', 'y'], defaults=(0, 0))
# point1 = Point()      # используем значения по умолчанию
# point2 = Point(1, 9)
# print(point1)   # Point(x=0, y=0)
# print(point2)   # Point(x=1, y=9)
#
# Можно указать значение по умолчанию только для некоторых полей
# присваивает значения по умолчанию с конца.
#
# rom collections import namedtuple
#
# Point = namedtuple('Point', ['x', 'y'], defaults=(0,))  # присволи значение x работает в обратном порядке
# point =  Point(7)      # используем значения по умолчанию для y
# print(point) # Point(x=7, y=0)

# - module
# from collections import namedtuple
# Point = namedtuple('Point', ['x', 'y'], module='customtypes')
# point = Point(1, 2)
# print(type(point))  # <class 'customtypes.Point'>


# Распаковка именованного кортежа
# Мы можем распаковывать именованный кортеж, также как и обычный.
# from collections import namedtuple
# Person = namedtuple('Person', ['name', 'age', 'height'])
# timur = Person('Тимур', 29, 170)
# name, age, height = timur
# print(name)
# print(age)
# print(height)

# Срезы #результатом среза является обычный кортеж
# from collections import namedtuple
# Point = namedtuple('Point3D', ['x', 'y', 'z'])
# point = Point(89, 54, -34)
# print(point[1:])
# print(point[:2])
# print(point[1:2])



