Стандартный интерпретатор Python использует сразу два механизма очистки памяти:
подсчет ссылок
сборщик мусора (Garbage Collector, GC)

Алгоритм подсчета ссылок — это один из самых простых механизмов очистки памяти.
Объекты удаляются как только на них больше нет ссылок.

Каждый объект в Python унаследован от базового класса PyObject,
который содержит специальное поле Reference Count (ob_refcnt),
в котором хранится количество ссылок на данный объект.
Как только кто-то начинает ссылаться на объект, значение этого поля увеличивается на единицу.
Если по какой-то причине ссылка пропадает, то это поле уменьшается на один.
При этом если счетчик ссылок для определенного объекта достигает нуля,
то интерпретатор запускает процесс уничтожения объекта.
Если удаленный объект содержал ссылки на другие объекты, то эти ссылки также удаляются.
Таким образом, удаление одного объекта может повлечь за собой удаление других.

Четыре основных сценария, увеличивающих количество ссылок на объект:
    создание нового объекта и присвоение его переменной
    присвоение уже существующего объекта переменной
    передача объекта в функцию в качестве аргумента
    добавление объекта в список, множество, словарь и т.д.

Четыре основных сценария, уменьшающих количество ссылок на объект:
    удаление объекта из области видимости функции после ее завершения
    удаление переменной с помощью оператора del
    переприсваивание переменной нового значения
    удаление объекта из списка, множества, словаря и т.д.


ля получения количества ссылок на заданный объект используется функция getrefcount() из модуля sys.
mport sys
nums = [1, 2, 3]
print(sys.getrefcount(nums))
Когда мы вызываем функцию getrefcount() для получение количества ссылок на объект,
мы увеличиваем количество ссылок на объект на один,
так как передаем nums в качестве аргумента в функцию.
Поэтому счетчик ссылок равен 2


В Python алгоритм подсчета ссылок является фундаментальным и не может быть отключен,
тогда как сборщик мусора (GC) опционален и может быть отключен.


Сборщик мусора
сборщик мусора не работает в режиме реального времени и запускается периодически.
Каждый запуск сборщика создаёт микропаузы в работе программы, поэтому Python использует различные эвристики
для определения частоты запуска сборщика мусора.

Сборщик мусора разделяет все объекты на 3 поколения (нулевое, первое и второе).
Новые объекты попадают в нулевое поколение.
Если новый объект выживает в процессе сборки мусора, то он перемещается в следующее поколение.
Чем старше поколение, тем реже оно сканируется на сборку мусора.
Так как новые объекты зачастую имеют очень маленький срок жизни (являются временными),
то имеет смысл проверять их чаще, чем те, которые уже прошли через несколько этапов сборки мусора.

В каждом поколении есть специальный порог срабатывания,
при достижении которого срабатывает процесс сборки мусора.
Если сразу несколько поколений преодолели порог, то выбирается наиболее старшее поколение,
так как сборка мусора в старших поколениях включает в себя также сборку мусора и в младших поколениях.

Для взаимодействия со сборщиком мусора используется модуль gc.
Наиболее полезные функции модуля:
    gc.enable(): включает сборщика мусора (по умолчанию он включен)
    gc.disable(): отключает сборщика мусора
    gc.isenabled(): возвращает True, если сборщик мусора включен, или False в противном случае
    gc.collect(): запускает сборщика мусора на всех трех поколениях.
    Функция имеет необязательный аргумент generation (целое число от 00 до 22),
    указывающий номер поколения, в котором нужно запустить сборщика мусора


