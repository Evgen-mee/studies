# Функция filter
# filter(func, *iterables)
# вторым параметром можем передать функцию которая возвращает коллекцию
# работает только с итерированными обьектами
# первым параметром передаем ссылку на функцию БЕЗ СКОБОК
# filter(есле фукция вернет try, элемент колекции будет записан )
# a = [1,2,3,4,5]
# b = list(filter(lambda x : x % 2 == 0,a))
# b = [2,4]
#
# можно в качестве первого параметра передать значение None
# В таком случае каждый элемент последовательности
# будет проверен на соответствие значению True
#
# true_values = filter(None, [1, 0, 10, '', None, [], [1, 2, 3], ()])
# for value in true_values:
#     print(value)
# Вывод
# 1
# 10
# [1, 2, 3]
# В данном случае, значения списка 0, '', None, [], () позиционируется как False
# а значения 1, 10, [1, 2, 3]  как True


# # Импортируем модуль sys для работы с входными данными из стандартного потока ввода
# import sys
# # Читаем все строки из стандартного потока ввода, удаляем лишние пробелы и сохраняем в виде списка
# lst_in = list(map(str.strip, sys.stdin.readlines()))
# # Создаем кортеж tp из списка lst_in, разбив каждую строку по знаку равенства на две части
# tp = tuple(map(lambda s: tuple(str.split(s, sep='=')), lst_in))
# # Отфильтровываем кортеж tp, оставляя только элементы, второе значение которых больше или равно 500
# f = filter(lambda x: int(x[1]) >= 500, tp)
# # Преобразуем полученный результат в генератор, содержащий только первые значения каждого элемента
# gen = map(lambda x: x[0], f)
# # Выводим элементы генератора, разделенные пробелом
# print(*gen)

# Проверка mail
# import re
# regex = re.compile(r'([A-Za-z0-9]+[.-_])*[A-Za-z0-9]+@[A-Za-z0-9-]+(\.[A-Z|a-z]{2,})+')
# s = list(map(str,input().split()))
# print(*filter(lambda x: re.fullmatch(regex, x),s))

data = ['Timur', -16.648911695768902, 'six', -202, 883.0093275936454, -765, (3, 4), -105.10718000213546, 976, -308.96857946288094, 458, ['one', 'two'], 479.92207220345927, -87, -71, 'twelve', 112, -621, -715.0179551194733, 'seven', 229, 729, -358, [1, 2, 3], -974, 882, -894.4709033242768, '', 323.7720806756133, 'beegeek', -224, 431, 170.6353248658936, -343.0016746052049, 'number', 104.17133679352878, [], -353.5964777099863, 'zero', -113, 288, None, -708.3036176571618]

print(*map(int,filter(lambda x: type(x) in (int,float),data)))