# # –ê–Ω–æ–Ω–∏–º–Ω—ã–µ (lambda) —Ñ—É–Ω–∫—Ü–∏–∏
# –í —Ç–µ–ª–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å
# –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏–π –∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
#
# –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–µ—é—Ç —Ç–∞–∫–æ–π –∂–µ —Ç–∏–ø, –∫–∞–∫ –∏ –æ–±—ã—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
#
# –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Ä–Ω–∞—Ä–Ω—ã–π —É—Å–ª–æ–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä
# numbers = [-2, 0, 1, 2, 17, 4, 5, 6]
# result = list(map(lambda x: 'even' if x % 2 == 0 else 'odd', numbers))
# print(result) == ['even', 'even', 'odd', 'even', 'odd', 'even', 'odd', 'even']
# lambda "–ø–∞—Ä–∞–º–µ—Ç—Ä1","–ø–∞—Ä–∞–º–µ—Ç—Ä2": –∫–æ–º–∞–Ω–¥–∞
#
#
# f1 = lambda: 10 + 20               # —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
# f2 = lambda —Ö, —É: —Ö + —É            # —Ñ—É–Ω–∫—Ü–∏—è —Å –¥–≤—É–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
# f3 = lambda —Ö, —É, z: —Ö + —É + z     # —Ñ—É–Ω–∫—Ü–∏—è —Å —Ç—Ä–µ–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
#
#
# –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ Python:
# –∞–Ω–æ–Ω–∏–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ,
# –∏ –Ω–µ –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–≤–æ–µ —Ç–µ–ª–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã;
#
# –≤ —Ç–µ–ª–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–∞–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã, –∫–∞–∫ return, pass, assert –∏–ª–∏ raise,
# –≤—ã–∑–æ–≤—É—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ SyntaxError;
#
# –∞–Ω–æ–Ω–∏–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∏—à–µ—Ç—Å—è –∫–∞–∫ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è;
#
# –∞–Ω–æ–Ω–∏–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–∑–≤–∞–Ω–∞ ü§ì.
#
# –ü–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏–∏ –µ–µ –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –∂–µ –≤—ã–∑–≤–∞—Ç—å.
# print((lambda —Ö, —É: —Ö + —É)(5, 10))     # 5 + 10
# print(1 + (lambda x: x*5)(10) + 2)     # 1 + 50 + 2



