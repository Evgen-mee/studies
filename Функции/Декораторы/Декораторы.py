# Декоратор — это функция, которая принимает другую функцию, расширяет ее поведение,
# не изменяя ее явно, и возвращает новую функцию
#
# декораторы обертывают функцию, изменяя ее поведение
#
# @ декорирует функцию сразу во время определения
# затрудняет доступ к недекорированной функции
# можем декорировать некоторые функции вручную,
# чтобы сохранить возможность вызывать и недекорированную версию функции.
#
#
# def sample_decorator(func):          # определяем декоратор
#     def wrapper():
#         print('Начало функции')
#         func()
#         print('Конец функции')
#     return wrapper
# def say():
#     print('Привет Мир!')
# say = sample_decorator(say)          # декорируем функцию
# say()                                # вызываем декорированную функцию
#
#
# def sample_decorator(func):          # определяем декоратор
#     def wrapper():
#         print('Начало функции')
#         func()
#         print('Конец функции')
#     return wrapper
# @sample_decorator                    # декорируем функцию
# def say():
#     print('Привет Мир!')
# say()
#
# Применение нескольких декораторов
# Декораторы применяются в порядке снизу вверх
#
# def bold(func):
#     def wrapper():
#         return '<b>' + func() + '</b>'
#     return wrapper
# def italic(func):
#     def wrapper():
#         return '<i>' + func() + '</i>'
#     return wrapper
#
# Применим их к функции greet().
# @bold
# @italic
# def greet():
#     return 'Hello world!'
# print(greet()) # выводит: <b><i>Hello world!</i></b>
#
#
# *args и **kwargs во внутренней функции
# позволит принимать произвольное число позиционных и именованных аргументов
# def bold(func): # @bold будет работать как ля функций с параметрами так и без благодоря *args и **kwargs
#     def wrapper(*args, **kwargs):        #принимает произвольное число позиционных и именованных аргументов
#         return '<b>' + func(*args, **kwargs) + '</b>' #и передает их в декорируемую функцию func()
#     return wrapper
# @bold
# def greet1(name):
#     return f'Hello {name}!'
# print(greet1('Timur')) # <b>Hello Timur!</b>
#
#
# Возврат значений
# Данный код НЕ ВЕРНЕТ ЗНАЧЕНИЕ
# так как вложенная функция wrapper() явно не возвращает какого либо значения
# def talk(func):
#     def wrapper(*args, **kwargs):
#         dash = '-' * 15
#         print(dash)
#         func(*args, **kwargs)           # вызываем декорируемую функцию
#         print(dash)
#     return wrapper
# Данный код ВЕРНЕТ ЗНАЧЕНИЕ!!!
# вложенная функция wrapper() возвращает задекорированное значение
# которое, в свою очередь, возвращает функция.
# def func_decorator(foo): # принимаем функцию в декоратор
#     def wrapper(*args, **kwargs): #прописываем для уневерсального принятия параметров
#         print("Действие до функции")
#         res = foo(*args, **kwargs) # вызов нужной функции и передача параметра
#         print("Действие после функции")
#         return res # вернули результат работы функции foo()
#     return wrapper #ООООЧЕНЬ ВАЖНО ВОЗВРАЩАТЬ ССЫЛКУ

















