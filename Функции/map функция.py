# Функция map
# b = map(int,[1,2,3,45,6]) перевели str в int ГЕНЕРАТОР
# b сейчас является генератором!

# b = list(map(int,[1,2,3,45,6])) перевели str в int и записали как список в b
# map(применяем функцию к каждому экземпляру коллекции, коллекция)

# первым параметром передаем ссылку на функцию БЕЗ СКОБОК
# так же можем использовать ляьбдо функции

# x = "".join(map(lambda x: t.get(x,'-') ,s.lower()))

# можно передать несколько последовательностей
# Если в последовательностях разное количество элементов,
# то последовательность с минимальным количеством элементов становится ограничителем.

# В качестве последовательностей мы можем использовать:
# списки, строки, кортежи, множества, словари.

# def func(elem1, elem2, elem3):
#     return elem1 + elem2 + elem3
#
# numbers1 = [1, 2, 3, 4, 5]
# numbers2 = [10, 20, 30, 40, 50]
# numbers3 = [100, 200, 300, 400, 500]
#
# new_numbers = list(map(func, numbers1, numbers2, numbers3))  #  преобразуем итератор в список
#
# print(new_numbers)

# round(x, n=0) принимает два числовых аргумента
# и округляет переданное число цифр после десятичной запятой.
# Значением по умолчанию 0

# Если в функцию map() передаётся несколько iterable,
# то функция func должна принимать количество аргументов,
# соответствующее количеству переданных итерируемых объектов,
# при этом func будет применяться к элементам всех итерируемых объектов параллельно.
#
# summa = map(lambda x, y, z: x + y + z, [1, 2], [3, 4], [5, 6])
# powers = map(pow, [2, 3, 4], [4, 2, 3])
# print(*summa)
# print(*powers)
# выводит:
# 9 12
# 16 9 64
# останавливается, когда исчерпывается самый короткий итерируемый объект.