# callable() (вызываемый или нет обьект)
# принимает в качестве аргумента некоторый объект и возвращает True,
# если переданный объект является вызываемым, или False в противном случае.
# print(callable(int))
# print(callable(list))
# print(callable(100))
# print(callable([1, 2, 3]))
# выводит:
# True
# True
# False
# False
#
# hasattr() проверки существования атрибута
# используется для проверки существования атрибута
# object — объект, в котором нужно проверить существование атрибута
# name — имя проверяемого атрибута
# озвращает True, если object имеет атрибут name
# print(hasattr('stepik', 'isalpha'))
# print(hasattr([1, 2, 3], 'sort'))
# print(hasattr(13, 'to_str'))
# выводит:
# True
# True
# False
#
# hash() хеш переданного обьекта
# принимает в качестве аргумента некоторый объект и возвращает целое число,
# представляющее хеш-значение переданного объекта
# Изменяемые коллекции, такие как списки, множества и словари, не имеют хеш-значений.
#
# xеш-значения целых чисел совпадают с самим числом, за исключением числа −1−1
#
# Приведенный ниже код:
# print(hash(899))
# print(hash(69.0))
# print(hash('timyrik'))
# print(hash((1, 2, 3)))
# print(hash(False))
# print(hash(True))
# выводит:
# 899
# 69
# 1468304915
# -378539185
# 0
# 1
#
#
# help() получения документации
# ля получения документации по указанному модулю, функции или другому объекту
# качестве аргумента либо сам объект, либо строку с именем объекта.
#
#
# repr()
# в качестве аргумента некоторый объект и возвращает строку,
# содержащую формальное (понятное интерпретатору) представление переданного объекта.

# eval() выполняет код-строку и возврщает значение
# выполняет строку-выражение, переданную ей в качестве обязательного аргумента,
# и возвращает результат выполнения этой строки.
# xpression — строка-выражение, которую требуется исполнить
#
# совершает следующие шаги
#  -1 Парсит (parse) выражение
#  -2 Компилирует (compile) выражение в байт-код
#  -3 Вычисляет (evaluate) значение выражения
#  -4 Возвращает (return) результат вычисления
#
# expression = '7 + 10'
# result = eval(expression)
# print(type(result))
# print(result)
# выводит:
# <class 'int'>
# 17
#
# Выражения, передаваемые в качестве аргумента функции eval(),
# имеют доступ ко всем локальным и глобальным переменным.
#
# Операторами, которые нельзя использовать в качестве выражений,
# являются, например, while, for, if, def, import, class, raise
# лючевое
# слово
# for используется в списочном выражении, то функция eval() может его вычислить
#
# exec() выполняет блок-кода и возвращает None
# Выполняет переданный блок кода и всегда возвращает значение None.
# code = '100 + 10*7 - 14'
# result = exec(code)
# print(result)
# выводит:
# None
#
# code — строка, представляющая собой корректный блок кода
# code = '''a = 10
# b = 20
# print(a + b)'''
# exec(code)
# выводит:
# 30





