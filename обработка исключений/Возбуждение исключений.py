# Для возбуждения исключения используется оператор raise
# В качестве аргумента оператор raise использует экземпляр класса,
# унаследованного от Exception
# Класс указывает на тип исключения
# аргумент, передаваемый конструктору этого исключения,
# обычно описывает подробности возникновения исключительной ситуации.
#
# При печати объекта исключения автоматически происходит вызов функции str()
#
# try:
#     raise IndexError('ошибочка')             # возбуждение исключения вручную
# except Exception as err:
#     print(err)
#     print(type(err))
# выводит:
# ошибочка
# <class 'IndexError'>
#
#
# def get_month_name(index):
#     if not index.isdigit():
#         raise TypeError('Аргумент должен быть числом.')
#     if int(index) < 1 or int(index) > 12:
#         raise ValueError('Аргумент должен быть целым числом от 1 до 12.')
#     ...
#
# try:
#     x, y = 10, 0
#     if y == 0:
#         raise ZeroDivisionError('Произошло деление на ноль.')
# except ZeroDivisionError as err:
#     print(err)
#     print(err.args)
#     print(type(err.args))
# выводит:
# Произошло деление на ноль.
# ('Произошло деление на ноль.',)
# <class 'tuple'>

# В ситуации, когда мы перехватываем исключение, делаем некие действия,
# а затем пробрасываем его выше, нужно использовать следующий код:
# try:
#     х = 1 / 0
# except Exception as err:
#     print(err)                  # каким-то образом обработали перехваченное исключение
#     raise                      # пробрасываем исключение выше


