# выделяют следующие три категории ошибок:
# синтаксические – возникают из-за синтаксических погрешностей кода
# логические – проявляются вследствие логических неточностей в алгоритме
# ошибки времени выполнения, исключения – вызваны некорректными действиями пользователя или системы
#
# Исключения являются ошибками времени выполнения, возникающие в процессе выполнения программы
# и связанные с некорректностью переданных в программу данных, недоступностью ресурсов
#
# подход два в одном — функция возвращает False как для ожидаемой, так и для неожиданной ошибки.
# Такой подход как правило применялся в API общего назначения и коде пользовательских программ,
# когда большую часть ошибок можно было смело считать фатальными
#
# подход разделения ошибок, при котором функция возвращает False в случае неожиданной ошибки,
# а ожидаемую ошибку возвращает отдельным возвращаемым значением (числовым).
# Такой подход применялся в более надежном коде и подразумевал разделение на ожидаемые ошибки и неожиданные


# try:
# контролируемый - блок программного кода,
# который мы подозреваем на предмет возможного возникновения ошибки
# except:
# код обработки ошибки (исключения).
#
# Если при выполнении кода в блоке try возникла ошибка,
# то выполнение кода trу блока прекращается,
# и выполняется код обработки ошибки (исключения) в блоке except
# После этого управление передается следующей команде после конструкции try-except
#
# try:                                              # начало кода в котором может произойти ошибка
#     num1 = int(input())
#     num2 = int(input())
#     print('Частное чисел равно', num1 / num2)
# except:                                           # выполняется если произошла ошибка
#     print('Вы ввели некорректные данные!')
#
# print('Работа программы завершена!')               # выполняется всегда
#
# Для того что бы работать с определенной ошибкой
# нужно добавить дополнительные блоки except
# и указать действия к  определенной ошибке
# try:
#     num1 = int(input())
#     num2 = int(input())
#     print('Частное чисел равно', num1 / num2)
# except ValueError:
#     print('Нужно было ввести числа!')
# except ZeroDivisionError:
#     print('На ноль делить нельзя!')
# print('Работа программы завершена!')
#
# Если требуется для ряда исключений
# выполнить одно и то же действие то можно обьеденять в один except
# try:
#     num1 = int(input())
#     num2 = int(input())
#     print('Частное чисел равно', num1 / num2)
# except (ValueError, IndexError, KeyError):
#     print('Тут обрабатываются сразу три типа ошибок!')
# except ZeroDivisionError:
#     print('На ноль делить нельзя!')
# except:
#     print('Если не сработал ни один из предыдущих блоков except.')
#
# print('Работа программы завершена!')
#
# типы исключений
#  - IndexError: возникает, когда индекс (например, для элемента списка) указан неправильно (выходит за границы)
#  - KeyError: возникает при неверно указанном ключе словаря
#  - NameError: возникает, если не удается найти переменную с некоторым названием
#  - SyntaxError: возникает при наличии в исходном коде синтаксических ошибок
#  - TypeError: возникает при несоответствии типов, когда для обработки требуется значение определенного типа,
# а передается значение другого типа
#  - FileNotFoundError: возникает при открытии несуществующего файла
#  - ValueError: возникает, когда в функцию передается аргумент с неподдерживаемым значением
#  - ZeroDivisionError: возникает при попытке выполнить деление на ноль
#
#  - pass равноценный отсутствию операции.
# В ходе исполнения данного оператора ничего не происходит,
# поэтому он может использоваться в качестве заглушки в тех местах,
# где это синтаксически необходимо, например, в инструкциях,
# где тело является обязательным, таких как def, except, with и т.д:
#     def do_something():
#         pass
#     try:
#         print('beegeek')
#     except:
#         pass
#     with open('beegeek.txt') as file:
#         pass
#
#
# oбрабатывают исключения не только в том случае, если они возникают непосредственно в блоке try,
# но и в том случае, если они возникают внутри функций, вызываемых в блоке try
#
#     def this_fails():
#         num = 1 / 0
#     try:
#         this_fails()
#     except ZeroDivisionError:
#         print('Деление на ноль')
#     выводит:
#     Деление
#     на
#     ноль

