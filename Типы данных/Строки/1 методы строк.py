
# ord()          определение кода символа
# chr()          позволяет определить по коду символа сам символ


# s.upper()       переводит в верхний регистр
# s.lower()       переводит в нижний регистр


# s.title()       первый символ каждого слова переводится в верхний регистр
# s.capitalize()  делает первую букву Строки заглавной
# s.swapcase()    меняет регистр букв на противоположный,

# s.startswith(<suffix>, <start>, <end>)  определяет начинается ли исходная строка s подстрокой <suffix>.
# s.endswith(<suffix>, <start>, <end>) определяет оканчивается ли исходная строка s подстрокой <suffix>.


# s.split(" ")     разбивает строку на список по указанному символу
# " ".join(итерируемый обьект) обьеденяет символы в строку


#
# s.find(подстрока,start,end) возвращает индекс вхождения подстроки в строку, если входа нет то вернет -1
#
# s.rfind(подстрока,start,end) возвращает индекс вхождения подстроки в строку, если входа нет то вернет -1
# ПОИСК С ПРАВА НА ЛЕВО
#
# s.index(подстрока,start,end) возвращает индекс первого вхождения подстроки в строку.
# если символ или подстрока sub не найдены то будет исключение ValueError
#
# s.count(подстрока,start,end) поиск подстроки в строке ВЕРНЕТ колл повторений



#eval(s = "11+22 - 3+4") выполняет действия в строке на выходе получим результат действий

# Метод partition() принимает на вход один аргумент sep,
# разделяет строку при первом появлении sep и возвращает кортеж, состоящий из трех элементов:
# часть перед разделителем, сам разделитель и часть после разделителя.
# Если разделитель не найден, то кортеж содержит саму строку, за которой следуют две пустые строки.
# s1 = 'abc-de'.partition('-')
# ('abc', '-', 'de')

