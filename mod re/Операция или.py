#  - Условие (?(n)yes|no)
# (?(n)yes|no)
# Если у группы n нашлись совпадения - возвращается шаблон до |
# В противном случае возвращается шаблон после |
# Шаблон после | необязателен и может быть опущен
#
#
# regex = r"(a)?(?(1)b|c)"
# Группа (a)? ищет букву a. К группе применён квантификатор ?, т.к. этой буквы может не быть в тексте
# Если в первой группе нашлась буква a, то условие (?(1)b|c) ищет букву b
# Если первая группа ничего не нашла, то условие ищет букву c
# В данном примере регулярное выражение найдёт все ab и c в тексте
#
#
# regex = r"^(\[)?\d(?(1)\]|)$"
# Выражение для поиска цифры в скобках или без скобок
# Группа (\[)? ищет первую скобку. К группе применён квантификатор ?, т.к. скобки может и не быть
# Условие (?(1)\]|) ищет правую скобку, если в первой группе найдена левая скобка.
# Если первая группа ничего не нашла, то условие ничего не ищет.
# Найдёт 1 и [2]
# Проигнорирует 3] и [4]


# Операция или
# найдут нужные строки при соответствии их хотя бы одному из выражений.
# r'Привет|Пока'
# найдёт все слова Привет и Пока в тексте
#
# в lookbehind можно использовать |, только если все шаблоны одинаковой длины
# правильные:
# (?<=hi!|bye)
# (?<![abcdef]|\d)
# (?<=\w|\W|\s)
#
# ошибка:
# (?<=hi!|long_text)
# (?<![abcdef]|\d{4})
# (?<=\w\s|\W)
#
# Для того, чтобы обойти такое исключение, нужно использовать | в non-capturing group:
# (?:(?<=hi!)|(?<=long_text))
# (?:(?<![abcdef])|(?<!\d{4}))
# (?:(?<=\w\s)|(?<=\W))
#
# В lookahead можно спокойно ставить условия с шаблонами разной длины, ошибок не будет


Оператор "Или" в квадратных скобках
# Задача: Нужно найти слово Hi или Bye
wrong_regex = r'[Hi|Bye]'
# Неправильное регулярное выражение, т.к. оно равносильно следующему выражению [BHeiy|]
# Квадратные скобки используются только для замены символов, условие или в них не работает
correct_regex = r'(Hi|Bye)'
# Поставленную выше задачу решает
correct_regex2 = r'(?:Hi|Bye)'
# Non-capturing group идеально подходит для группировки шаблонов
correct_regex3 = r'Hi|Bye'
# Шаблон без групппировки. Также работает, поставленную выше задачу решает

regex = r"\(Привет, (Олег|Григорий))|(Пока,(Олег|Григорий))\b"
Привет, Олег
Привет, Григорий
Пока, Олег
Пока, Григорий