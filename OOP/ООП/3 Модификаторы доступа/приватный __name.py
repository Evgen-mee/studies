# если имя атрибута начинается с двух нижних подчеркиваний __name, то он считается приватным

# все атрибуты являются публичными по умолчанию.
# Любой атрибут объекта может быть доступен за пределами класса,
# независимо от того, является он публичным, защищенным или приватным.

# Физически механизм ограничения доступа к атрибутам в Python реализован слабо, лишь на уровне соглашения,
# поэтому ответственность за соблюдение данного соглашения ложится на плечи программистов.

# код за пределами класса не сможет получить к нему доступ напрямую!!!


# приватный атрибут получает другое имя!!!
# class Cat:
#     def __init__(self, name):
#         self.__name = name                 # указали что атрибут является приватным
#                                            # данный атрибут скрыт от прямого обращения
#
# cat = Cat('Кемаль')                        # создали экземпляр класса


# Обращаемся на прямую:
# print(cat.__name)
# приводит к возбуждению исключения: AttributeError: 'Cat' object has no attribute '__name'


# Запросим атрибуты класса
# print(cat.__dict__)
# вернет словарь в котором указан данный атрибут{'_Cat__name': 'Кемаль'}
# видим что произошла подмена имени было __name стало _Cat__name


# Обращаемся к подмененному имени
# cat._Cat__name = 'Роджер'
# print(cat.__dict__)                 # {'_Cat__name': 'Роджер'}
# как видим произошла замена имени в приватном атрибуте


