# Самый популярный способ упростить работу с атрибутами,
# не потеряв все преимущества геттеров и сеттеров, — превратить их в свойства.
# Свойства предоставляют промежуточную функциональность между атрибутами и методами.
# Другими словами, они позволяют создавать методы, которые ведут себя как атрибуты.

# Для создания свойств используется встроенная функция property(). Она принимает четыре аргумента:
#  fget — функция для получения значения атрибута
#  fset — функция для установки значения атрибута
#  fdel — функция для удаления атрибута
#  doc — строка документации

# если присвоить переменную в инициализаторе
#     def __init__(self, name):
#         self._name = name
# то не будет вызываться сетор и соответственно проверка на валидность
# нам придется дублировать код проверки!!!!!

# class Cat:
# в инициализаторе мы не создаем атрибут name
# мы обращаемся к уже имеющемуся свойству name (сеттору)
# и изменяем его значение
# приводит к вызову сеттера, внутри которого происходит создание атрибута _name
#
#     def __init__(self, name):
#         self.name = name         # self.name не является переменной а вызывает сетор т.к. мы используем property()
#
#     def get_name(self):
#         return self._name
#
#     def set_name(self, name):
#         if isinstance(name, str) and name.isalpha():
#             self._name = name
#         else:
#             raise ValueError('Некорректное имя')
#
#     name = property(get_name, set_name)                # создаем свойство name для управления именем
#
# cat1 = Cat('Кемаль')
# cat2 = Cat('Роджер')
#
# print(cat1.name)                                       # равнозначно cat1.get_name()
# print(cat2.name)                                       # равнозначно cat2.get_name()
#
# cat1.name = 'Рэтчет'                                   # равнозначно cat1.set_name('Рэтчет')
# print(cat1.name)


