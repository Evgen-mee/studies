# ДЛЯ ТОГО ЧТО БЫ ОПЕРАТОР РАБОТАЛ В ОБЕ СТОРОНЫ
# В КЛАССЕ ДОЛЖНЫ БЫТЬ РЕАЛИЗОВАННЫ ОБА МЕТОДА БЕЗ ПРЕФИКСА И С ПРЕФИКСОМ r
# В КАЖДОМ МЕТОДЕ МОЖЕТ БЫТЬ АБСОЛЮТНО РАЗНАЯ ЛОГИКА
# ДЛЯ ОДИНАКОВОЙ ЛОГИКИ В МЕТОДЕ С ПРЕФЕКСОМ ВЫЗЫВАЕМ МЕТОД БЕЗПРЕФИКСА
#


# Чтобы разрешить выполнять с экземплярами нашего класса различные операции двоичного сдвига и логические операции,
# нам требуется определить в классе соответствующие магические методы:
#
# __lshift__() — определяет поведение для двоичного сдвига влево (оператор <<)
# __rshift__() — определяет поведение для двоичного сдвига вправо (оператор >>)
# __and__() — определяет поведение для двоичного И (оператор &)
# __or__() — определяет поведение для двоичного ИЛИ (оператор |)
# __xor__() — определяет поведение для двоичного XOR, (оператор ^)



# При любой операции сначала происходит попытка вызвать основную версию магического метода
# (без префикса r) у первого операнда, и если он не определен явно или при
# его вызове была возвращена константа NotImplemented,
# происходит попытка вызова отраженной версии магического метода (с префиксом r) у второго операнда.

# Для реализации операции двоичного сдвига и логические операции, не учитывающих порядок операндов,
# в Python доступен дополнительный набор магических методов с префиксом r
# ПРЕФИКС r МЕНЯЕТ МЕСТАМИ ПРИНИМАЕМЫЕ АРГУМЕНТЫ
#
# __rlshift__() — определяет поведение для двоичного сдвига влево (оператор <<)
# __rrshift__() — определяет поведение для двоичного сдвига вправо (оператор >>)
# __rand__() — определяет поведение для двоичного И (оператор &)
# __ror__() — определяет поведение для двоичного ИЛИ (оператор |)
# __rxor__() — определяет поведение для двоичного XOR, (оператор ^)

