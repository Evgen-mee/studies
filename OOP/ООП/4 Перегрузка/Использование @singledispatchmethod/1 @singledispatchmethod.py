# способ имитации нескольких инициализаторов заключается в создании универсальной функции
# одиночной диспетчеризации.

# Данный способ позволяет определить несколько инициализаторов и
# выборочно их использовать в зависимости от типа первого переданного в них аргумента

# Универсальная функция (generic function) представляет собой функцию, составленную из нескольких функций,
# реализующих одну и ту же операцию для различных типов

# Одиночная диспетчеризация (single dispatch) — это алгоритм,
# который выбирает нужную реализацию на основе типа одного аргумента.

# При использовании декоратора @singledispatchmethod альтернативные
# реализации не должны иметь то же имя, что и базовая реализация

# !!!!ограничением перегрузки методов с помощью декоратора @singledispatchmethod является то,
# что мы полагаемся лишь на тип одного аргумента — первого после self!!!!

# from functools import singledispatchmethod
# class MyClass:
#     @singledispatchmethod                  # Базовая реализация
#     def base_implementation(self, arg):
#         print('Базовая реализация')
#
#     @base_implementation.register(int)     # Реализация для целочисленного аргумента
#     def int_implementation(self, arg):
#         print('Реализация для целочисленного аргумента')
#
#     @base_implementation.register(str)     # Реализация для строкового аргумента
#     def str_implementation(self, arg):
#         print('Реализация для строкового аргумента')
#
#
# obj = MyClass()
#
# obj.base_implementation(1)           # Реализация для целочисленного аргумента
# obj.base_implementation('bee')       # Реализация для строкового аргумента
# obj.base_implementation([1, 2, 3])   # Базовая реализация





