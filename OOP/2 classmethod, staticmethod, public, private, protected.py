# 1 (classmethod) и статические методы (staticmethod)
# 2 public, private, protected


#Методы класса (classmethod) и статические методы (staticmethod)
# @classmethod

# @staticmethod самостоятельная функция обьявленная в нутри класса
# не имеют доступа не к атрибутам класса не к атрибутам экземпляров
# создается для удобства и обычно связанна с тематикой класса


# для работы из обьекта класса и с атрибутами класса
# def__init__(self)
# def get_foo()

#только для работы внутри класса
# @classmethod
# def validate(cls,arg):

# для работы вне класса или в классе с параметрами определенными в самой функции
# не обращается не к атребутам класса не к атрибутам экземпляра
# @staticmethod
# def norm2(x,y):

class Vector:
    MIN_COORD = 0
    MAX_COORD = 100

    # определили метод на уровне класса
    # может обращаться только к атрибутам класса и не работает с экземплярами класса
    # можно вызывать на прямую из класса x = Vector.validate(5) x = True
    # автоматически подставится cls благодоря декоратору
    @classmethod
    def validate(cls,arg):
        return cls.MIN_COORD <= arg <= cls.MAX_COORD # вернет True если в диапозоне


    def __init__(self,x,y):
        self.x = x = self.y = y = 0
        if self.validate(x) and  self.validate(y): # сделали проверку с помощью функции класса
            self.x = x
            self.y = y


    def get_coord(self):
        return self.x, self.y


    # можно использовать вне класса
    # x = Vector.norm2(5,5) x = 50
    # так же можно вызывать в классе self.norm2("значение1","значение2") передаем по ссылке self.x self.y

    @staticmethod
    def norm2(x,y):
        return x*x + y*y



# Режимы доступа public, private, protected. Сеттеры и геттеры

# public - публичное свойство
# attribute или method без подчеркиваний в начале названия атрибута класса - экземпляра

# protected - служит для обращения внутри класса и во всех дочерних классах
# _attribute или _method с одним подчеркиванием в начале
# Так как в пайтан не реализованна 100% protected
# _protected  просто дает знать программисту как его использовать
# доступ из вне остается открытым

# private - служит для обращения ТОЛЬКО внутри класса
# __attribute или __method с двумя подчеркиванием в начале
# при вызове из вне __attribute вылетит ошибка
# доступ из вне ЗАКРЫТ
# Обращаемся через методы set_(ввод) и get_(вывод)
# set_(ввод) и get_(вывод) служат для ввода и вывода защищенных атрибутов
# и проверки входящих и сходящих данных

# для лучшей защиты используем библиотеку accessny
# pip install accessify установить модуль

# импартирвуем два дикоратора
# from accessify import private, protected
# @private
# при использовании декоратора при вызове метода из вне вылитет ошибка
# @protected