# С помощью контекстных менеджеров мы можем не только грамотно управлять ресурсами,
# но и выполнять любую пару операций, которую необходимо выполнить до и после каких-то действий. Например:
#  - открытие и закрытие
#  - создание и удаление
#  - изменение данных и возврат к начальным данным
#  - блокировка и освобождение
#  - вход и выход
#  - старт и стоп


# - __enter__() – вводит контекст и при необходимости возвращает некоторый объект.
# Значение, возвращаемое этим методом, привязывается к переменной в предложении as оператора with
#
# - __exit__() – предоставляет выход из контекста и возвращает логический флаг (тип bool),
# указывающий на то, следует ли подавлять возбужденное исключение.
# При возбуждении исключения во время выполнения тела блока with, аргументы содержат:
#  - exc_type  тип исключения
#  - exc_value объект исключения
#  - traceback информацию о трассировке
# В противном случае все три аргумента равны None

# Целые числа (тип int) не поддерживают протокол контекстного менеджера.

# проверка на менеджер контекста
# return True if '__enter__' in dir(obj) and '__exit__' in dir(obj) else False

# Если у метода __exit__() установить возвращаемое значение в True,
# то это приведет к тому, что оператор with будет подавлять возникающие исключения внутри себя
# и продолжит выполнение с оператора, непосредственно следующего за оператором with.
# В противном случае возникшее исключение продолжает распространяться после завершения выполнения этого метода.


# Для того чтобы передать значения из метода __enter__() в тело блока контекста with,
# нужно использовать атрибуты объекта, возвращаемого методом __enter__()
# class CustomContextManager:
#     def __init__(self, value):
#         self.value = value
#
#     def __enter__(self):
#         print('Вход в контекстный менеджер...')
#         self.name = 'Кемаль'
#         self.breed = 'Британский'
#         return self
#
#     def __exit__(self, exc_type, exc_value, traceback):
#         print('Выход из контекстного менеджера...')
#
#
# with CustomContextManager('pygen') as manager:
#     print(manager.value)
#     print(manager.name)
#     print(manager.breed)
#
# выводит:
# Вход в контекстный менеджер...
# pygen
# Кемаль
# Британский
# Выход из контекстного менеджера...


# Менеджеры контекста – это обычные классы,
# которые могут содержать дополнительные атрибуты и методы, включая магические методы.

# class CustomContextManager:
#     def __enter__(self):                                   # 2 вызывается метод __enter__()
#         print('Вход в контекстный менеджер...')            # 3 выполняется тело __enter__()
#         return 'Python generation!'                        # 4 возвращает строку которая присваевается в manager
#
#
#     def __exit__(self, exc_type, exc_value, traceback):      # 6 вызывается __exit__ по выходу из with
#         print('Выход из контекстного менеджера...')          # 7 выполняется тело with
#         if isinstance(exc_value, IndexError):                # 8 если есть ошибка
#             print(f'Тип возникшего исключения: {exc_type}')  # 9 печатаем тип ошибки
#             print(f'Текст исключения: {exc_value}')          # 10 печатаем текст ошибки
#             return True                                      # 11 подавляем возбужденное исключение IndexError
#         return False                                         # 12 все остальные типы исключений не подавляются
#
#
#  with CustomContextManager() as manager:                     # 1 создается экземпляр класса
#     print(manager)                                           # 5 выполняется тело with
#     print(manager[100])                                      # обращаемся по несуществующему индексу
#
# выводит:
# Вход в контекстный менеджер...
# Python generation!
# Выход из контекстного менеджера...
# Тип возникшего исключения: <class 'IndexError'>
# Текст исключения: string index out of range






