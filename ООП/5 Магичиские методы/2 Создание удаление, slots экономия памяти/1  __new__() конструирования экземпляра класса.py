# Когда мы вызываем класс, мы запускаем внутренний процесс
# конструирования экземпляра класса, который состоит из двух шагов:

# создание нового пустого экземпляра класса
# инициализация созданного экземпляра класса

# все классы имеют магический метод __new__(),
# который отвечает за создание и возврат нового пустого экземпляра класса

# Затем созданный экземпляр передается в метод __init__()
# для инициализации, то есть для установки его атрибутам необходимых значений


# принимает в качестве первого обязательного аргумента класс, а затем, как правило,
# произвольное количество позиционных и именованных аргументов.


# обязательным аргументом метода __new__() пользовательского класса является сам класс
# после которого, как правило, следуют произвольное количество позиционных и именованных аргументов
# аргументы, указываемые при вызове класса, передаются как в метод __init__(), так и в метод __new__()

# !!! всегда должен возвращать экземпляр того класса, в котором этот метод определен.!!!

# вместо  object.__new__(cls) можно  instance = super().__new__(cls)


# class Singleton:
#     _instance = None
#
#     def __new__(cls, *args, **kwargs):
#         if cls._instance is None:                       # при первом вызове создаем объект
#             cls._instance = object.__new__(cls)
#         return cls._instance
#
#
# first = Singleton()
# second = Singleton()
#
# print(first)                       # <__main__.Singleton object at 0x00000275CF7DB8B0>
# print(second)                      # <__main__.Singleton object at 0x00000275CF7DB8B0>
# print(first is second)             # True








