# По умолчанию Python использует словарь для управления атрибутами экземпляра класса

# Для оптимизации потребляемой памяти в Python были добавлены слоты.

# С помощью данного атрибута мы определяем набор атрибутов, которыми может обладать экземпляр класса.

# После определения слотов в классе Python не будет использовать словарь __dict__
# для управления атрибутами экземпляров этого класса.
# Также пропадет возможность добавлять экземплярам класса новые атрибуты.
# В обоих случаях получим ошибку  AttributeError

# Наиболее значимым преимуществом слотов является пониженное потребление памяти, так как словари,
# используемые по умолчанию, достаточно затратны.

# значением атрибута __slots__ может быть любой итерируемый объект, содержащий строковые имена атрибутов !!!!!!

# Если определили __slots__
# то обращаемся к __slots__ в не __dict__!!!

# разрешает нам определять дополнительные атрибуты для экземпляров дочернего класса

# Если мы хотим, чтобы дочерний класс также использовал слоты, мы можем определить их в нем самом

# Если при наследовании родительский класс не использует слоты, а дочерний класс использует,
# экземпляры дочернего класса все равно будут иметь словарь атрибутов __dict__

# метод, который будет возвращать атрибуты текущего класса и родительского
# def get_slots(self):
#     return super().__slots__ + self.__slots__


# class Point2D:
#     __slots__ = ('x', 'y')
#
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
#
# class Point3D(Point2D):
#     def __init__(self, x, y, z):
#         super().__init__(x, y)
#         self.z = z
#
#
# point = Point3D(1, 2, 3)
#
# print(point.x, point.y, point.z)  # 1 2 3
# print(point.__slots__)            # ('x', 'y')
# print(point.__dict__)             # {'z': 3}


# lass Point2D:
#     __slots__ = ('x', 'y')
#
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
#
# class Point3D(Point2D):
#     __slots__ = ('z',)
#
#     def __init__(self, x, y, z):
#         super().__init__(x, y)
#         self.z = z
#
# point = Point3D(1, 2, 3)
#
# print(point.x, point.y, point.z)  # 1 2 3
# print(point.__slots__)            # ('z',)
