# Полиморфизм и перегрузка - это два разных концепта в объектно-ориентированном программировании.
#
# Перегрузка методов позволяет определить несколько методов с одним и тем же
# именем в одном классе, но с разными параметрами.
# Компилятор выберет нужный метод для вызова в зависимости от типов переданных аргументов.
#
# Полиморфизм же позволяет использовать один и тот же метод для объектов разных классов,
# если они реализуют один и тот же интерфейс или наследуются от одного базового класса.
# Это позволяет упростить код и повысить его гибкость.
# При вызове метода компилятор выберет нужную реализацию в зависимости от типа объекта, на котором вызывается метод.

# Без полиморфизма может потребоваться проверка типа перед выполнением действия над объектом, чтобы определить
# правильный метод для вызова. Полиморфизм позволяет избавиться от лишних условий и избыточного кода в целом.

# Перегрузка методов — создание методов с одним и тем же именем,
# но с разными типами аргументов не поддерживается в Python

# class Cat:
#     def __init__(self, name):
#         self.name = name
#
#     def sound(self):
#         return 'мяу'
#
# class Dog:
#     def __init__(self, name):
#         self.name = name
#
#     def sound(self):
#         return 'гав'
#
#
# cat = Cat('Кемаль')
# dog = Dog('Роджер')
#
# for animal in (cat, dog):
#     print(f'{animal.name} говорит {animal.sound()}')
#
# выводит:
# Кемаль говорит мяу
# Роджер говорит гав



