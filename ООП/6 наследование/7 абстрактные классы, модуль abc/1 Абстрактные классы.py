#  - абстрактный класс не содержит всех реализаций методов, необходимых для полной работы,
# это означает, что он содержит один или несколько абстрактных методов

# - абстрактный метод – это только объявление метода, без его подробной реализации

# - абстрактный класс предоставляет интерфейс для наследников, чтобы избежать дублирования кода,
# при этом нет смысла создавать экземпляр абстрактного класса

# - классы наследники должны реализовать все абстрактные методы для создания конкретного класса,
# который соответствует интерфейсу, определенному абстрактным классом

# Для создания абстрактных классов используется встроенный модуль abc
# Абстрактный класс можно определить с помощью наследования от класса abc.ABC
# абстрактный метод — с помощью декоратора @abc.abstractmethod

# класс является абстрактным только в том случае, если он наследуется от класса abc.ABC
# и имеет хотя бы один абстрактный метод

# Наследник абстрактного класса должен переопределить все абстрактные методы,
# иначе экземпляр такого класса будет невозможно создать.

# Можно определить некоторый общий функционал в абстрактном методе и использовать функцию super()
# для вызова его в подклассах

# Совместно с декоратором @abstractmethod можно использовать такие декораторы, как
# @property
# @classmethod
# @staticmethod
# при этом декоратор @abstractmethod следует применять как самый внутренний декоратор.

# можно определить абстрактное свойство для чтения и записи, соответствующим образом пометив один
# или несколько базовых методов как абстрактные:
# from abc import ABC, abstractmethod
#
# class C(ABC):
#     @property
#     def x(self):
#         pass
#
#     @x.setter
#     @abstractmethod
#     def x(self, value):
#         pass

# Если класс не реализует какой-либо метод, то вместо заглушки pass
# он может возбуждать исключение NotImplementedError или содержать строку документации
# from abc import ABC, abstractmethod
#
# class C(ABC):
#     @abstractmethod
#     def method1(self, input):
#         '''docstring'''
#
#     @abstractmethod
#     def method2(self, output, data):
#         raise NotImplementedError


# from abc import ABC, abstractmethod
#
# class Animal(ABC):
#     @abstractmethod
#     def sound(self):
#         print('Не определен')
#
#     @abstractmethod
#     def move(self):
#         print('Животное движется')
#
# class Cat(Animal):
#     def sound(self):
#         print('мяу')
#
#     def move(self):
#         super().move()
#         print('Кот движется')
#
#
# cat = Cat()
#
# cat.move()
# cat.sound()
#
# выводит:
# Животное движется
# Кот движется
# мяу

